// Advanced Compliance/Privacy/Consent Engine - Database Tables
import { pgTable, text, serial, integer, boolean, timestamp, varchar, jsonb, decimal, uuid } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Global Consent Management - User consent tracking across all regions/verticals
export const globalConsentManagement = pgTable("global_consent_management", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id", { length: 255 }),
  sessionId: varchar("session_id", { length: 255 }),
  fingerprint: varchar("fingerprint", { length: 255 }),
  ipAddress: varchar("ip_address", { length: 45 }),
  userAgent: text("user_agent"),
  
  // Geolocation & Legal Framework
  country: varchar("country", { length: 10 }).notNull(), // ISO 3166-1 alpha-2
  region: varchar("region", { length: 100 }),
  detectedRegion: varchar("detected_region", { length: 100 }),
  legalFramework: varchar("legal_framework", { length: 50 }).notNull(), // GDPR, CCPA, LGPD, ePrivacy, PECR
  languageCode: varchar("language_code", { length: 10 }).default("en"),
  
  // Consent Categories
  cookiesConsent: varchar("cookies_consent", { length: 20 }).default("pending"), // granted, denied, pending
  analyticsConsent: varchar("analytics_consent", { length: 20 }).default("pending"),
  personalizationConsent: varchar("personalization_consent", { length: 20 }).default("pending"),
  marketingConsent: varchar("marketing_consent", { length: 20 }).default("pending"),
  affiliateConsent: varchar("affiliate_consent", { length: 20 }).default("pending"),
  emailConsent: varchar("email_consent", { length: 20 }).default("pending"),
  pushConsent: varchar("push_consent", { length: 20 }).default("pending"),
  smsConsent: varchar("sms_consent", { length: 20 }).default("pending"),
  
  // Granular Consent Details
  consentDetails: jsonb("consent_details"), // Detailed consent breakdown per vertical/feature
  consentMethod: varchar("consent_method", { length: 50 }), // banner, form, api, import
  consentVersion: varchar("consent_version", { length: 20 }).notNull(),
  
  // Legal Basis & Documentation
  legalBasis: varchar("legal_basis", { length: 100 }), // legitimate_interest, consent, contract, legal_obligation
  consentEvidence: jsonb("consent_evidence"), // Screenshots, form data, API logs
  withdrawalReason: text("withdrawal_reason"),
  
  // Timestamps & Lifecycle
  consentGrantedAt: timestamp("consent_granted_at"),
  consentWithdrawnAt: timestamp("consent_withdrawn_at"),
  lastUpdatedAt: timestamp("last_updated_at").defaultNow(),
  expiresAt: timestamp("expires_at"),
  
  // Compliance Flags
  isActive: boolean("is_active").default(true),
  requiresReconfirmation: boolean("requires_reconfirmation").default(false),
  isMinor: boolean("is_minor").default(false),
  parentalConsentRequired: boolean("parental_consent_required").default(false),
  
  // Audit Trail
  auditTrail: jsonb("audit_trail"), // Complete history of consent changes
  syncedWithExternalSystems: jsonb("synced_with_external_systems"),
  complianceScore: decimal("compliance_score", { precision: 3, scale: 2 }),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Privacy Policy & Legal Documents Management
export const privacyPolicyManagement = pgTable("privacy_policy_management", {
  id: serial("id").primaryKey(),
  documentType: varchar("document_type", { length: 100 }).notNull(), // privacy_policy, terms_conditions, cookie_policy, affiliate_disclosure
  vertical: varchar("vertical", { length: 100 }), // finance, health, saas, travel, security, education, ai_tools
  country: varchar("country", { length: 10 }), // ISO 3166-1 alpha-2
  language: varchar("language", { length: 10 }).default("en"),
  
  // Document Content
  title: varchar("title", { length: 500 }).notNull(),
  content: text("content").notNull(),
  htmlContent: text("html_content"),
  summary: text("summary"), // AI-generated executive summary
  
  // Legal Framework & Compliance
  legalFrameworks: jsonb("legal_frameworks"), // Array of applicable frameworks
  requiredDisclosures: jsonb("required_disclosures"), // Auto-detected required disclosures
  affiliateNetworks: jsonb("affiliate_networks"), // Required network disclosures
  adNetworks: jsonb("ad_networks"), // Required ad network disclosures
  
  // Versioning & Lifecycle
  version: varchar("version", { length: 50 }).notNull(),
  previousVersionId: integer("previous_version_id"),
  status: varchar("status", { length: 50 }).default("draft"), // draft, active, archived, expired
  approvedBy: varchar("approved_by", { length: 255 }),
  approvedAt: timestamp("approved_at"),
  
  // Auto-Generation & AI
  isAutoGenerated: boolean("is_auto_generated").default(false),
  generationPrompt: text("generation_prompt"),
  aiModel: varchar("ai_model", { length: 100 }),
  generationMetadata: jsonb("generation_metadata"),
  
  // Publication & Distribution
  publishedAt: timestamp("published_at"),
  effectiveDate: timestamp("effective_date"),
  expirationDate: timestamp("expiration_date"),
  notificationSent: boolean("notification_sent").default(false),
  notificationSentAt: timestamp("notification_sent_at"),
  
  // Analytics & Engagement
  views: integer("views").default(0),
  acceptances: integer("acceptances").default(0),
  rejections: integer("rejections").default(0),
  avgReadTime: integer("avg_read_time"), // seconds
  bounceRate: decimal("bounce_rate", { precision: 5, scale: 4 }),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// User Data Control & Rights Management
export const userDataControlRequests = pgTable("user_data_control_requests", {
  id: serial("id").primaryKey(),
  requestId: varchar("request_id", { length: 100 }).notNull().unique(),
  userId: varchar("user_id", { length: 255 }),
  email: varchar("email", { length: 320 }),
  
  // Request Details
  requestType: varchar("request_type", { length: 50 }).notNull(), // access, portability, rectification, erasure, restriction, objection
  legalBasis: varchar("legal_basis", { length: 100 }), // gdpr_article_15, ccpa_section_1798, lgpd_article_18
  description: text("description"),
  
  // Scope & Data Categories
  dataCategories: jsonb("data_categories"), // personal_data, analytics, marketing, cookies, etc.
  verticals: jsonb("verticals"), // Which verticals are affected
  dateRange: jsonb("date_range"), // From/to dates for data request
  
  // Processing & Status
  status: varchar("status", { length: 50 }).default("pending"), // pending, processing, completed, rejected, appealed
  priority: varchar("priority", { length: 20 }).default("normal"), // low, normal, high, urgent
  assignedTo: varchar("assigned_to", { length: 255 }),
  
  // Identity Verification
  verificationMethod: varchar("verification_method", { length: 100 }),
  verificationStatus: varchar("verification_status", { length: 50 }).default("pending"),
  verificationAttempts: integer("verification_attempts").default(0),
  verificationData: jsonb("verification_data"),
  
  // Processing Details
  estimatedCompletionDate: timestamp("estimated_completion_date"),
  actualCompletionDate: timestamp("actual_completion_date"),
  processingNotes: text("processing_notes"),
  rejectionReason: text("rejection_reason"),
  
  // Data Export & Delivery
  exportFormat: varchar("export_format", { length: 50 }), // json, csv, pdf, zip
  exportFileSize: integer("export_file_size"), // bytes
  exportUrl: text("export_url"),
  downloadCount: integer("download_count").default(0),
  exportExpiresAt: timestamp("export_expires_at"),
  
  // Follow-up & Appeal
  followUpRequired: boolean("follow_up_required").default(false),
  appealed: boolean("appealed").default(false),
  appealReason: text("appeal_reason"),
  appealStatus: varchar("appeal_status", { length: 50 }),
  
  // Compliance & Audit
  responseTime: integer("response_time"), // hours from request to completion
  slaCompliance: boolean("sla_compliance"),
  auditTrail: jsonb("audit_trail"),
  notificationsSent: jsonb("notifications_sent"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Affiliate & Ad Network Compliance
export const affiliateComplianceManagement = pgTable("affiliate_compliance_management", {
  id: serial("id").primaryKey(),
  networkName: varchar("network_name", { length: 255 }).notNull(),
  networkType: varchar("network_type", { length: 100 }).notNull(), // affiliate, ad_network, marketplace
  networkId: varchar("network_id", { length: 255 }),
  
  // Geographic & Legal Restrictions
  allowedCountries: jsonb("allowed_countries"), // ISO 3166-1 alpha-2 codes
  restrictedCountries: jsonb("restricted_countries"),
  restrictedRegions: jsonb("restricted_regions"), // State/province level
  legalFrameworks: jsonb("legal_frameworks"), // Applicable compliance frameworks
  
  // Disclosure Requirements
  requiredDisclosures: jsonb("required_disclosures"), // Network-specific disclosure text
  disclosureTemplates: jsonb("disclosure_templates"), // Per country/language templates
  disclosurePosition: varchar("disclosure_position", { length: 50 }), // top, bottom, inline, popup
  disclosureLanguages: jsonb("disclosure_languages"),
  
  // Network Rules & Policies
  networkPolicies: jsonb("network_policies"), // Link cloaking, cookie duration, etc.
  commissionStructure: jsonb("commission_structure"),
  cookieDuration: integer("cookie_duration"), // days
  trackingMethods: jsonb("tracking_methods"), // cookies, pixels, postback
  
  // Compliance Monitoring
  complianceChecks: jsonb("compliance_checks"), // Automated check results
  lastComplianceCheck: timestamp("last_compliance_check"),
  complianceScore: decimal("compliance_score", { precision: 3, scale: 2 }),
  violationHistory: jsonb("violation_history"),
  
  // Status & Lifecycle
  status: varchar("status", { length: 50 }).default("active"), // active, suspended, terminated, under_review
  contractStart: timestamp("contract_start"),
  contractEnd: timestamp("contract_end"),
  autoRenewal: boolean("auto_renewal").default(false),
  
  // Performance & Analytics
  totalClicks: integer("total_clicks").default(0),
  totalConversions: integer("total_conversions").default(0),
  totalRevenue: decimal("total_revenue", { precision: 12, scale: 2 }).default("0"),
  avgEpc: decimal("avg_epc", { precision: 8, scale: 4 }), // Earnings per click
  
  // Contact & Support
  accountManager: varchar("account_manager", { length: 255 }),
  supportEmail: varchar("support_email", { length: 320 }),
  technicalContact: jsonb("technical_contact"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Compliance Audit & Monitoring System
export const complianceAuditSystem = pgTable("compliance_audit_system", {
  id: serial("id").primaryKey(),
  auditId: varchar("audit_id", { length: 100 }).notNull().unique(),
  auditType: varchar("audit_type", { length: 100 }).notNull(), // gdpr, ccpa, cookies, affiliate, accessibility, security
  
  // Audit Scope
  vertical: varchar("vertical", { length: 100 }),
  country: varchar("country", { length: 10 }),
  dateRange: jsonb("date_range"),
  auditCriteria: jsonb("audit_criteria"),
  
  // Audit Execution
  status: varchar("status", { length: 50 }).default("scheduled"), // scheduled, running, completed, failed
  startedAt: timestamp("started_at"),
  completedAt: timestamp("completed_at"),
  executedBy: varchar("executed_by", { length: 255 }), // user_id or system
  automatedScan: boolean("automated_scan").default(true),
  
  // Findings & Results
  overallScore: decimal("overall_score", { precision: 3, scale: 2 }),
  criticalIssues: integer("critical_issues").default(0),
  highIssues: integer("high_issues").default(0),
  mediumIssues: integer("medium_issues").default(0),
  lowIssues: integer("low_issues").default(0),
  
  // Detailed Results
  auditFindings: jsonb("audit_findings"), // Detailed findings with recommendations
  nonComplianceItems: jsonb("non_compliance_items"),
  recommendedActions: jsonb("recommended_actions"),
  riskAssessment: jsonb("risk_assessment"),
  
  // Comparison & Trends
  previousAuditId: integer("previous_audit_id"),
  improvementScore: decimal("improvement_score", { precision: 3, scale: 2 }),
  trendAnalysis: jsonb("trend_analysis"),
  
  // Follow-up & Remediation
  remediationPlan: jsonb("remediation_plan"),
  remediationDeadline: timestamp("remediation_deadline"),
  remediationStatus: varchar("remediation_status", { length: 50 }), // pending, in_progress, completed, overdue
  followUpRequired: boolean("follow_up_required").default(false),
  nextAuditDate: timestamp("next_audit_date"),
  
  // Reporting & Documentation
  reportGenerated: boolean("report_generated").default(false),
  reportUrl: text("report_url"),
  reportFormat: varchar("report_format", { length: 50 }), // pdf, html, json, csv
  stakeholdersNotified: boolean("stakeholders_notified").default(false),
  
  // Compliance Metadata
  auditFramework: varchar("audit_framework", { length: 100 }), // iso27001, gdpr, ccpa, custom
  auditStandard: varchar("audit_standard", { length: 100 }),
  certificationImpact: boolean("certification_impact").default(false),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Geo-restriction & Content Filtering
export const geoRestrictionManagement = pgTable("geo_restriction_management", {
  id: serial("id").primaryKey(),
  ruleId: varchar("rule_id", { length: 100 }).notNull().unique(),
  ruleName: varchar("rule_name", { length: 255 }).notNull(),
  ruleType: varchar("rule_type", { length: 50 }).notNull(), // geo_block, geo_allow, content_filter, offer_restriction
  
  // Geographic Targeting
  targetCountries: jsonb("target_countries"), // ISO 3166-1 alpha-2 codes
  targetRegions: jsonb("target_regions"), // State/province level
  excludedCountries: jsonb("excluded_countries"),
  excludedRegions: jsonb("excluded_regions"),
  
  // Content & Offer Filtering
  contentTypes: jsonb("content_types"), // offer, article, tool, course, etc.
  verticals: jsonb("verticals"), // finance, health, saas, etc.
  affiliateNetworks: jsonb("affiliate_networks"),
  offerCategories: jsonb("offer_categories"),
  
  // Rule Logic & Conditions
  conditions: jsonb("conditions"), // Complex filtering logic
  actions: jsonb("actions"), // hide, redirect, show_alternative, block_access
  fallbackContent: jsonb("fallback_content"), // Alternative content to show
  redirectUrl: text("redirect_url"),
  
  // Legal & Compliance Basis
  legalBasis: varchar("legal_basis", { length: 255 }), // gdpr, local_law, network_restriction
  complianceFramework: varchar("compliance_framework", { length: 100 }),
  regulatoryRequirement: text("regulatory_requirement"),
  
  // Rule Status & Lifecycle
  status: varchar("status", { length: 50 }).default("active"), // active, inactive, testing, expired
  priority: integer("priority").default(100), // Higher number = higher priority
  effectiveDate: timestamp("effective_date"),
  expirationDate: timestamp("expiration_date"),
  
  // Performance & Analytics
  applicationsCount: integer("applications_count").default(0), // How many times rule was applied
  blockedRequests: integer("blocked_requests").default(0),
  allowedRequests: integer("allowed_requests").default(0),
  lastTriggered: timestamp("last_triggered"),
  
  // Testing & Validation
  testMode: boolean("test_mode").default(false),
  testResults: jsonb("test_results"),
  validationStatus: varchar("validation_status", { length: 50 }),
  
  // Audit & Change Management
  createdBy: varchar("created_by", { length: 255 }),
  lastModifiedBy: varchar("last_modified_by", { length: 255 }),
  changeReason: text("change_reason"),
  approvalRequired: boolean("approval_required").default(false),
  approvedBy: varchar("approved_by", { length: 255 }),
  approvedAt: timestamp("approved_at"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// RBAC & Admin Access Control for Compliance
export const complianceRbacManagement = pgTable("compliance_rbac_management", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id", { length: 255 }).notNull(),
  roleId: varchar("role_id", { length: 100 }).notNull(),
  roleName: varchar("role_name", { length: 255 }).notNull(),
  
  // Permission Scope
  permissions: jsonb("permissions"), // Granular permissions array
  verticalAccess: jsonb("vertical_access"), // Which verticals user can access
  countryAccess: jsonb("country_access"), // Geographic restrictions
  dataAccess: jsonb("data_access"), // What data categories user can access
  
  // Role Details
  roleType: varchar("role_type", { length: 50 }).notNull(), // admin, analyst, legal, support, auditor
  accessLevel: varchar("access_level", { length: 50 }).notNull(), // read, write, admin, super_admin
  canViewPii: boolean("can_view_pii").default(false),
  canExportData: boolean("can_export_data").default(false),
  canDeleteData: boolean("can_delete_data").default(false),
  canManageConsent: boolean("can_manage_consent").default(false),
  
  // Session & Security
  sessionTimeout: integer("session_timeout").default(3600), // seconds
  ipWhitelist: jsonb("ip_whitelist"),
  requireMfa: boolean("require_mfa").default(true),
  lastLogin: timestamp("last_login"),
  failedLoginAttempts: integer("failed_login_attempts").default(0),
  accountLocked: boolean("account_locked").default(false),
  
  // Delegation & Temporary Access
  isDelegated: boolean("is_delegated").default(false),
  delegatedBy: varchar("delegated_by", { length: 255 }),
  delegationReason: text("delegation_reason"),
  accessExpiresAt: timestamp("access_expires_at"),
  
  // Audit & Monitoring
  accessLog: jsonb("access_log"), // Recent access history
  actionsPerformed: jsonb("actions_performed"), // Action history
  dataAccessed: jsonb("data_accessed"), // What data was accessed
  complianceTraining: jsonb("compliance_training"), // Training completion status
  
  // Status & Lifecycle
  status: varchar("status", { length: 50 }).default("active"), // active, suspended, expired, revoked
  grantedBy: varchar("granted_by", { length: 255 }),
  grantedAt: timestamp("granted_at").defaultNow(),
  revokedBy: varchar("revoked_by", { length: 255 }),
  revokedAt: timestamp("revoked_at"),
  revocationReason: text("revocation_reason"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Insert schemas for validation
export const insertGlobalConsentManagementSchema = createInsertSchema(globalConsentManagement).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertPrivacyPolicyManagementSchema = createInsertSchema(privacyPolicyManagement).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertUserDataControlRequestsSchema = createInsertSchema(userDataControlRequests).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertAffiliateComplianceManagementSchema = createInsertSchema(affiliateComplianceManagement).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertComplianceAuditSystemSchema = createInsertSchema(complianceAuditSystem).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertGeoRestrictionManagementSchema = createInsertSchema(geoRestrictionManagement).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertComplianceRbacManagementSchema = createInsertSchema(complianceRbacManagement).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

// Type exports
export type GlobalConsentManagement = typeof globalConsentManagement.$inferSelect;
export type InsertGlobalConsentManagement = z.infer<typeof insertGlobalConsentManagementSchema>;

export type PrivacyPolicyManagement = typeof privacyPolicyManagement.$inferSelect;
export type InsertPrivacyPolicyManagement = z.infer<typeof insertPrivacyPolicyManagementSchema>;

export type UserDataControlRequests = typeof userDataControlRequests.$inferSelect;
export type InsertUserDataControlRequests = z.infer<typeof insertUserDataControlRequestsSchema>;

export type AffiliateComplianceManagement = typeof affiliateComplianceManagement.$inferSelect;
export type InsertAffiliateComplianceManagement = z.infer<typeof insertAffiliateComplianceManagementSchema>;

export type ComplianceAuditSystem = typeof complianceAuditSystem.$inferSelect;
export type InsertComplianceAuditSystem = z.infer<typeof insertComplianceAuditSystemSchema>;

export type GeoRestrictionManagement = typeof geoRestrictionManagement.$inferSelect;
export type InsertGeoRestrictionManagement = z.infer<typeof insertGeoRestrictionManagementSchema>;

export type ComplianceRbacManagement = typeof complianceRbacManagement.$inferSelect;
export type InsertComplianceRbacManagement = z.infer<typeof insertComplianceRbacManagementSchema>;