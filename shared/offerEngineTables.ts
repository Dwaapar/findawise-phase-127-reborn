import { pgTable, text, serial, integer, boolean, timestamp, varchar, jsonb, real, uuid } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Offer Sources Configuration - Plugin-based integrations
export const offerSources = pgTable("offer_sources", {
  id: serial("id").primaryKey(),
  slug: varchar("slug", { length: 100 }).notNull().unique(),
  name: varchar("name", { length: 255 }).notNull(),
  type: varchar("type", { length: 50 }).notNull(), // 'api', 'scraper', 'manual'
  description: text("description"),
  baseUrl: text("base_url"),
  apiConfig: jsonb("api_config"), // API keys, endpoints, headers
  scrapingConfig: jsonb("scraping_config"), // Selectors, rules
  credentials: jsonb("credentials"), // Encrypted JWT tokens
  isActive: boolean("is_active").default(true),
  lastSync: timestamp("last_sync"),
  syncFrequency: varchar("sync_frequency", { length: 50 }).default('hourly'), // 'hourly', 'daily', 'twice_daily'
  errorCount: integer("error_count").default(0),
  metadata: jsonb("metadata"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Core Offers Feed - The beating heart of empire monetization
export const offerFeed = pgTable("offer_feed", {
  id: serial("id").primaryKey(),
  offerUuid: uuid("offer_uuid").defaultRandom().notNull().unique(),
  sourceId: integer("source_id").references(() => offerSources.id),
  title: varchar("title", { length: 500 }).notNull(),
  slug: varchar("slug", { length: 200 }).notNull().unique(),
  merchant: varchar("merchant", { length: 255 }).notNull(),
  price: real("price"),
  oldPrice: real("old_price"),
  currency: varchar("currency", { length: 10 }).default('USD'),
  couponCode: varchar("coupon_code", { length: 100 }),
  discountType: varchar("discount_type", { length: 50 }), // 'percentage', 'fixed', 'bogo'
  discountValue: real("discount_value"),
  validTill: timestamp("valid_till"),
  region: varchar("region", { length: 100 }).default('global'),
  emotion: varchar("emotion", { length: 50 }), // 'urgent', 'exclusive', 'trusted', 'popular'
  category: varchar("category", { length: 100 }).notNull(),
  tags: jsonb("tags"), // Array of string tags
  sourceType: varchar("source_type", { length: 50 }).notNull(),
  isExpired: boolean("is_expired").default(false),
  clickTrackingUrl: text("click_tracking_url").notNull(),
  apiSource: varchar("api_source", { length: 100 }),
  commissionEstimate: real("commission_estimate"),
  meta: jsonb("meta"), // Additional metadata from source
  llmSummary: text("llm_summary"), // AI-generated summary
  intentEmbedding: jsonb("intent_embedding"), // Vector embedding for semantic matching
  qualityScore: real("quality_score").default(0), // AI-computed quality score
  ctr: real("ctr").default(0), // Click-through rate
  conversionRate: real("conversion_rate").default(0),
  lastClick: timestamp("last_click"),
  clickCount: integer("click_count").default(0),
  revenueGenerated: real("revenue_generated").default(0),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  priority: integer("priority").default(1), // 1-10 scale
  autoGenerated: boolean("auto_generated").default(false),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  syncedAt: timestamp("synced_at").defaultNow(),
});

// Offer Analytics - Performance tracking for AI optimization
export const offerAnalytics = pgTable("offer_analytics", {
  id: serial("id").primaryKey(),
  offerId: integer("offer_id").references(() => offerFeed.id),
  sessionId: varchar("session_id", { length: 255 }),
  userId: varchar("user_id", { length: 255 }),
  neuronId: varchar("neuron_id", { length: 255 }),
  pageSlug: varchar("page_slug", { length: 255 }),
  eventType: varchar("event_type", { length: 50 }).notNull(), // 'view', 'click', 'conversion'
  deviceType: varchar("device_type", { length: 50 }),
  geoLocation: varchar("geo_location", { length: 100 }),
  userAgent: text("user_agent"),
  referrer: text("referrer"),
  conversionValue: real("conversion_value"),
  metadata: jsonb("metadata"),
  timestamp: timestamp("timestamp").defaultNow(),
});

// Offer Personalization Rules - AI-driven filtering and matching
export const offerPersonalizationRules = pgTable("offer_personalization_rules", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  conditions: jsonb("conditions").notNull(), // Complex condition logic
  actions: jsonb("actions").notNull(), // Personalization actions
  priority: integer("priority").default(1),
  isActive: boolean("is_active").default(true),
  successRate: real("success_rate").default(0),
  lastTested: timestamp("last_tested"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Offer Experiments - A/B testing for optimization
export const offerExperiments = pgTable("offer_experiments", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).notNull(), // 'title', 'price', 'image', 'position'
  targetMetric: varchar("target_metric", { length: 50 }).notNull(), // 'ctr', 'conversion', 'revenue'
  variants: jsonb("variants").notNull(), // Array of experiment variants
  trafficSplit: jsonb("traffic_split").default('{"control": 50, "variant": 50}'),
  status: varchar("status", { length: 50 }).default('draft'), // 'draft', 'running', 'completed', 'paused'
  startDate: timestamp("start_date"),
  endDate: timestamp("end_date"),
  results: jsonb("results"),
  winningVariant: varchar("winning_variant", { length: 100 }),
  confidence: real("confidence"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Offer Sync History - Track all sync operations
export const offerSyncHistory = pgTable("offer_sync_history", {
  id: serial("id").primaryKey(),
  sourceId: integer("source_id").references(() => offerSources.id),
  batchId: uuid("batch_id").defaultRandom().notNull(),
  syncType: varchar("sync_type", { length: 50 }).notNull(), // 'full', 'incremental', 'cleanup'
  status: varchar("status", { length: 50 }).notNull(), // 'success', 'failed', 'partial'
  offersProcessed: integer("offers_processed").default(0),
  offersAdded: integer("offers_added").default(0),
  offersUpdated: integer("offers_updated").default(0),
  offersRemoved: integer("offers_removed").default(0),
  errors: jsonb("errors"),
  metadata: jsonb("metadata"),
  startedAt: timestamp("started_at").defaultNow(),
  completedAt: timestamp("completed_at"),
});

// Neuron Offer Assignments - Dynamic offer injection per neuron
export const neuronOfferAssignments = pgTable("neuron_offer_assignments", {
  id: serial("id").primaryKey(),
  neuronId: varchar("neuron_id", { length: 255 }).notNull(),
  offerId: integer("offer_id").references(() => offerFeed.id),
  position: varchar("position", { length: 100 }), // 'hero', 'sidebar', 'footer', 'inline'
  context: varchar("context", { length: 255 }), // Page/section context
  emotionMatch: varchar("emotion_match", { length: 50 }),
  intentMatch: real("intent_match").default(0), // Semantic similarity score
  isActive: boolean("is_active").default(true),
  autoAssigned: boolean("auto_assigned").default(true),
  assignedAt: timestamp("assigned_at").defaultNow(),
  lastServed: timestamp("last_served"),
  serveCount: integer("serve_count").default(0),
});

// Offer Compliance Rules - Legal and TOS safety
export const offerComplianceRules = pgTable("offer_compliance_rules", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  ruleType: varchar("rule_type", { length: 50 }).notNull(), // 'banned_merchant', 'geo_restriction', 'disclosure_required'
  conditions: jsonb("conditions").notNull(),
  action: varchar("action", { length: 50 }).notNull(), // 'hide', 'flag', 'require_disclosure'
  severity: varchar("severity", { length: 20 }).default('medium'), // 'low', 'medium', 'high', 'critical'
  isActive: boolean("is_active").default(true),
  violationCount: integer("violation_count").default(0),
  lastTriggered: timestamp("last_triggered"),
  createdAt: timestamp("created_at").defaultNow(),
});

// AI Optimization Queue - Tasks for self-improving system
export const offerAiOptimizationQueue = pgTable("offer_ai_optimization_queue", {
  id: serial("id").primaryKey(),
  taskType: varchar("task_type", { length: 100 }).notNull(), // 'rewrite_title', 'update_tags', 'quality_check'
  priority: integer("priority").default(1),
  offerId: integer("offer_id").references(() => offerFeed.id),
  neuronId: varchar("neuron_id", { length: 255 }),
  parameters: jsonb("parameters"),
  status: varchar("status", { length: 50 }).default('pending'), // 'pending', 'processing', 'completed', 'failed'
  result: jsonb("result"),
  processedAt: timestamp("processed_at"),
  createdAt: timestamp("created_at").defaultNow(),
});



// Insert schemas for all tables
export const insertOfferSourceSchema = createInsertSchema(offerSources).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertOfferFeedSchema = createInsertSchema(offerFeed).omit({
  id: true,
  offerUuid: true,
  createdAt: true,
  updatedAt: true,
  syncedAt: true,
});

export const insertOfferAnalyticsSchema = createInsertSchema(offerAnalytics).omit({
  id: true,
  timestamp: true,
});

export const insertOfferPersonalizationRuleSchema = createInsertSchema(offerPersonalizationRules).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertOfferExperimentSchema = createInsertSchema(offerExperiments).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertOfferSyncHistorySchema = createInsertSchema(offerSyncHistory).omit({
  id: true,
  batchId: true,
  startedAt: true,
});

export const insertNeuronOfferAssignmentSchema = createInsertSchema(neuronOfferAssignments).omit({
  id: true,
  assignedAt: true,
});

export const insertOfferComplianceRuleSchema = createInsertSchema(offerComplianceRules).omit({
  id: true,
  createdAt: true,
});

export const insertOfferAiOptimizationQueueSchema = createInsertSchema(offerAiOptimizationQueue).omit({
  id: true,
  createdAt: true,
});

// Type exports
export type OfferSource = typeof offerSources.$inferSelect;
export type InsertOfferSource = z.infer<typeof insertOfferSourceSchema>;

export type OfferFeed = typeof offerFeed.$inferSelect;
export type InsertOfferFeed = z.infer<typeof insertOfferFeedSchema>;

export type OfferAnalytics = typeof offerAnalytics.$inferSelect;
export type InsertOfferAnalytics = z.infer<typeof insertOfferAnalyticsSchema>;

export type OfferPersonalizationRule = typeof offerPersonalizationRules.$inferSelect;
export type InsertOfferPersonalizationRule = z.infer<typeof insertOfferPersonalizationRuleSchema>;

export type OfferExperiment = typeof offerExperiments.$inferSelect;
export type InsertOfferExperiment = z.infer<typeof insertOfferExperimentSchema>;

export type OfferSyncHistory = typeof offerSyncHistory.$inferSelect;
export type InsertOfferSyncHistory = z.infer<typeof insertOfferSyncHistorySchema>;

export type NeuronOfferAssignment = typeof neuronOfferAssignments.$inferSelect;
export type InsertNeuronOfferAssignment = z.infer<typeof insertNeuronOfferAssignmentSchema>;

export type OfferComplianceRule = typeof offerComplianceRules.$inferSelect;
export type InsertOfferComplianceRule = z.infer<typeof insertOfferComplianceRuleSchema>;

export type OfferAiOptimizationQueue = typeof offerAiOptimizationQueue.$inferSelect;
export type InsertOfferAiOptimizationQueue = z.infer<typeof insertOfferAiOptimizationQueueSchema>;