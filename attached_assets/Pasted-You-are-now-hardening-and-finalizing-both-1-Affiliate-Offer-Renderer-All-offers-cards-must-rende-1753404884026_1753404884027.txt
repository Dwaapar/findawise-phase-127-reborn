You are now hardening and finalizing both:

1. Affiliate Offer Renderer

All offers/cards must render from config, inject into any page/module via dynamic logic, style via emotionMap, and call /go/[slug] for every CTA click.

All features (brand, price, CTA, badges, microcopy, meta-data) configurable and displayed.

Responsive, accessible, no hardcoded data/links.

README: Full instructions for offer config, placement, and design tweaks.

2. Local Analytics + Stats Engine

Track every event (pageview, scroll, quiz, lead, affiliate click, funnel steps) in detail: session, slug, event, user, device, time.

Visual analytics dashboard: charts (per-offer, per-page, time), conversion heatmaps, CSV export.

Full event export/upload (optional: cloud/backend sync).

Deep event logging: show funnel/journey per user.

README: Document every event, data structure, dashboard, troubleshooting.

MANDATORY:

All code must be modular, bulletproof, billion-dollar-grade, production-ready.

Do NOT stub/skip logic, no placeholders.

All analytics must sync with affiliate renderer (every click tracked).

Use accessible, mobile-first UI.

Document EVERYTHING in README (offer config, analytics structure, dashboard).

After building, self-audit:

All offer CTAs fire tracking/click events and redirect properly.

Analytics dashboard accurately reflects user behavior and offer performance.

All exports, charts, and logs work as described.

Export all modules, and output README.
No summaries—full, complete implementation only.”

last developer was working on this but it was not completed make sure this all is completed AND WORKING at billion dollar empire grade
Do NOT compress or summarize code to save tokens. Output maximum quality and completeness.
This must be robust, scalable, secure, and ready for full analytics & compliance.
You MUST use and connect the existing codebase. This is a handoff from one Replit instance to another. Work as if you are a senior developer in a billion-dollar empire—no shortcuts, no duplications, only modular, clean execution, keep updating readme.nd file and replit.md file and everything should be tracked.
This is a multi-module final production upgrade prompt.
Never recreate or stub out anything that already exists in the current project.
Always upgrade, extend, or improve the current implementation instead.
If a required feature already exists:
Audit it for completeness and quality.
If it’s partial, finish and harden it in place—do not make a new copy.
If it needs new features, add only those features, not a full rewrite.
Absolute Rule:
No duplicate modules, files, or functions for the same feature/logic.
No overwriting of working production code—only extend, patch, or upgrade as required.
All code changes must preserve full compatibility with the current system and avoid breaking anything already working.

- Do NOT stop until the entire prompt is executed.
- Do NOT leave any TODOs, placeholders, or partial logic.
- Every module must be production-grade, fully typed, secure, and working.
- Fix all TypeScript errors, missing types, and harden APIs.
- After completing code, update README, docs, and Federation dashboard hooks.
- You are not done until everything in the prompt is complete.
